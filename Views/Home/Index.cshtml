@{
    ViewData["Title"] = "Home Page";
}

<div class="jumbotron">
    <h1>Contoso University</h1>
</div>
<div class="row">
    <div class="col-md-4">
        <h2>Welcome to Contoso University</h2>
        <p>
            Contoso University is a sample application that
            demonstrates how to use Entity Framework Core in an
            ASP.NET Core MVC web application.
        </p>
    </div>
    <div class="col-md-4">
        <h2>Build it from scratch</h2>
        <p>You can build the application by following the steps in a series of tutorials.</p>
        <p><a class="btn btn-default" href="https://docs.asp.net/en/latest/data/ef-mvc/intro.html">See the tutorial &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Download it</h2>
        <p>You can download the completed project from GitHub.</p>
        <p><a class="btn btn-default" href="https://github.com/aspnet/Docs/tree/master/aspnetcore/data/ef-mvc/intro/samples/cu-final">See project source code &raquo;</a></p>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <h2>Summary of what we've done so far:</h2>
        <b>Basics</b>
        <ul>
            <li>Created a basic application and updated the _Layout file and Index for the home page</li>
            <li>ran <code>dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL</code> to add postgres support</li>
            <li>Created a student class with a navigation property for enrollment</li>
            <li>Created an Enrollment class with an enum for Grade</li>
            <li>Created a Course class with an annotation on the courseID to specify no database generation of the ID</li>
            <li>Created a School Context to interact with the DB, and customized the table names</li>
            <li>Registered the DbContext in ConfigureServices</li>
            <li>Scaffolded a controller for students using Visual Studio</li>
        </ul>

        <b>Scaffold modifications</b>
        <ul>
            <li>Update the details page for students to include enrollemnts, this was done by using an Include and ThenInclude methods on the query in the controller</li>
            <li>Update the create method to not bind the ID property. Also wrapped the update actions to catch DbUpdateExceptions</li>
            <li>Update the edit method to use the read-and-update method, where the cooresponding object is read from the DB and the method TryUpdateModelAsync is used to update</li>
            <li>Updated the delete method to show an error if delete failed</li>
        </ul>

        <b>Data manipulation</b>
        <ul>
            <li>Added sorting, searching and paging to index page</li>
            <li>used query params to track state of the page</li>
            <li>instantiated a new class to retrieve and model paginated results</li>
            <li>added appropriate query params to the various hyperlinks on the page</li>
            <li>Added some summary statistics to the about page represented by a new ViewModel</li>
            <li>The controller action creates a query that groups data and then binds it into a list of objects</li>
        </ul>
        
        <b>Added migration support</b>
        <ul>
            <li>created an initial migration with <code>dotnet ef migrations add</code></li>
            <li>applied changes to the database with <code>dotnet ef datbase update</code></li>
        </ul>

    </div>
</div>